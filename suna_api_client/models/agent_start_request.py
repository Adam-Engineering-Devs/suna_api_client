# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AgentStartRequest(BaseModel):
    """
    Request model for starting an agent.
    """ # noqa: E501
    model_name: Optional[StrictStr] = None
    enable_thinking: Optional[StrictBool] = None
    reasoning_effort: Optional[StrictStr] = None
    stream: Optional[StrictBool] = None
    enable_context_manager: Optional[StrictBool] = None
    enable_prompt_caching: Optional[StrictBool] = None
    agent_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["model_name", "enable_thinking", "reasoning_effort", "stream", "enable_context_manager", "enable_prompt_caching", "agent_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AgentStartRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if model_name (nullable) is None
        # and model_fields_set contains the field
        if self.model_name is None and "model_name" in self.model_fields_set:
            _dict['model_name'] = None

        # set to None if enable_thinking (nullable) is None
        # and model_fields_set contains the field
        if self.enable_thinking is None and "enable_thinking" in self.model_fields_set:
            _dict['enable_thinking'] = None

        # set to None if reasoning_effort (nullable) is None
        # and model_fields_set contains the field
        if self.reasoning_effort is None and "reasoning_effort" in self.model_fields_set:
            _dict['reasoning_effort'] = None

        # set to None if stream (nullable) is None
        # and model_fields_set contains the field
        if self.stream is None and "stream" in self.model_fields_set:
            _dict['stream'] = None

        # set to None if enable_context_manager (nullable) is None
        # and model_fields_set contains the field
        if self.enable_context_manager is None and "enable_context_manager" in self.model_fields_set:
            _dict['enable_context_manager'] = None

        # set to None if enable_prompt_caching (nullable) is None
        # and model_fields_set contains the field
        if self.enable_prompt_caching is None and "enable_prompt_caching" in self.model_fields_set:
            _dict['enable_prompt_caching'] = None

        # set to None if agent_id (nullable) is None
        # and model_fields_set contains the field
        if self.agent_id is None and "agent_id" in self.model_fields_set:
            _dict['agent_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AgentStartRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "model_name": obj.get("model_name"),
            "enable_thinking": obj.get("enable_thinking"),
            "reasoning_effort": obj.get("reasoning_effort"),
            "stream": obj.get("stream"),
            "enable_context_manager": obj.get("enable_context_manager"),
            "enable_prompt_caching": obj.get("enable_prompt_caching"),
            "agent_id": obj.get("agent_id")
        })
        return _obj


