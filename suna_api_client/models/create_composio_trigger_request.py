# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateComposioTriggerRequest(BaseModel):
    """
    CreateComposioTriggerRequest
    """ # noqa: E501
    agent_id: StrictStr
    profile_id: StrictStr
    slug: StrictStr
    trigger_config: Dict[str, Any]
    route: StrictStr
    name: Optional[StrictStr] = None
    agent_prompt: Optional[StrictStr] = None
    workflow_id: Optional[StrictStr] = None
    workflow_input: Optional[Dict[str, Any]] = None
    connected_account_id: Optional[StrictStr] = None
    webhook_url: Optional[StrictStr] = None
    toolkit_slug: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["agent_id", "profile_id", "slug", "trigger_config", "route", "name", "agent_prompt", "workflow_id", "workflow_input", "connected_account_id", "webhook_url", "toolkit_slug"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateComposioTriggerRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if agent_prompt (nullable) is None
        # and model_fields_set contains the field
        if self.agent_prompt is None and "agent_prompt" in self.model_fields_set:
            _dict['agent_prompt'] = None

        # set to None if workflow_id (nullable) is None
        # and model_fields_set contains the field
        if self.workflow_id is None and "workflow_id" in self.model_fields_set:
            _dict['workflow_id'] = None

        # set to None if workflow_input (nullable) is None
        # and model_fields_set contains the field
        if self.workflow_input is None and "workflow_input" in self.model_fields_set:
            _dict['workflow_input'] = None

        # set to None if connected_account_id (nullable) is None
        # and model_fields_set contains the field
        if self.connected_account_id is None and "connected_account_id" in self.model_fields_set:
            _dict['connected_account_id'] = None

        # set to None if webhook_url (nullable) is None
        # and model_fields_set contains the field
        if self.webhook_url is None and "webhook_url" in self.model_fields_set:
            _dict['webhook_url'] = None

        # set to None if toolkit_slug (nullable) is None
        # and model_fields_set contains the field
        if self.toolkit_slug is None and "toolkit_slug" in self.model_fields_set:
            _dict['toolkit_slug'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateComposioTriggerRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agent_id": obj.get("agent_id"),
            "profile_id": obj.get("profile_id"),
            "slug": obj.get("slug"),
            "trigger_config": obj.get("trigger_config"),
            "route": obj.get("route"),
            "name": obj.get("name"),
            "agent_prompt": obj.get("agent_prompt"),
            "workflow_id": obj.get("workflow_id"),
            "workflow_input": obj.get("workflow_input"),
            "connected_account_id": obj.get("connected_account_id"),
            "webhook_url": obj.get("webhook_url"),
            "toolkit_slug": obj.get("toolkit_slug")
        })
        return _obj


