# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class InstallTemplateRequest(BaseModel):
    """
    InstallTemplateRequest
    """ # noqa: E501
    template_id: StrictStr
    instance_name: Optional[StrictStr] = None
    custom_system_prompt: Optional[StrictStr] = None
    profile_mappings: Optional[Dict[str, StrictStr]] = None
    custom_mcp_configs: Optional[Dict[str, Dict[str, Any]]] = None
    __properties: ClassVar[List[str]] = ["template_id", "instance_name", "custom_system_prompt", "profile_mappings", "custom_mcp_configs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InstallTemplateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if instance_name (nullable) is None
        # and model_fields_set contains the field
        if self.instance_name is None and "instance_name" in self.model_fields_set:
            _dict['instance_name'] = None

        # set to None if custom_system_prompt (nullable) is None
        # and model_fields_set contains the field
        if self.custom_system_prompt is None and "custom_system_prompt" in self.model_fields_set:
            _dict['custom_system_prompt'] = None

        # set to None if profile_mappings (nullable) is None
        # and model_fields_set contains the field
        if self.profile_mappings is None and "profile_mappings" in self.model_fields_set:
            _dict['profile_mappings'] = None

        # set to None if custom_mcp_configs (nullable) is None
        # and model_fields_set contains the field
        if self.custom_mcp_configs is None and "custom_mcp_configs" in self.model_fields_set:
            _dict['custom_mcp_configs'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InstallTemplateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "template_id": obj.get("template_id"),
            "instance_name": obj.get("instance_name"),
            "custom_system_prompt": obj.get("custom_system_prompt"),
            "profile_mappings": obj.get("profile_mappings"),
            "custom_mcp_configs": obj.get("custom_mcp_configs")
        })
        return _obj


