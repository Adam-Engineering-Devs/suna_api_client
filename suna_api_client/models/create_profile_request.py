# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateProfileRequest(BaseModel):
    """
    CreateProfileRequest
    """ # noqa: E501
    toolkit_slug: StrictStr
    profile_name: StrictStr
    display_name: Optional[StrictStr] = None
    mcp_server_name: Optional[StrictStr] = None
    is_default: Optional[StrictBool] = False
    initiation_fields: Optional[Dict[str, StrictStr]] = None
    custom_auth_config: Optional[Dict[str, StrictStr]] = None
    use_custom_auth: Optional[StrictBool] = False
    __properties: ClassVar[List[str]] = ["toolkit_slug", "profile_name", "display_name", "mcp_server_name", "is_default", "initiation_fields", "custom_auth_config", "use_custom_auth"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateProfileRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if display_name (nullable) is None
        # and model_fields_set contains the field
        if self.display_name is None and "display_name" in self.model_fields_set:
            _dict['display_name'] = None

        # set to None if mcp_server_name (nullable) is None
        # and model_fields_set contains the field
        if self.mcp_server_name is None and "mcp_server_name" in self.model_fields_set:
            _dict['mcp_server_name'] = None

        # set to None if initiation_fields (nullable) is None
        # and model_fields_set contains the field
        if self.initiation_fields is None and "initiation_fields" in self.model_fields_set:
            _dict['initiation_fields'] = None

        # set to None if custom_auth_config (nullable) is None
        # and model_fields_set contains the field
        if self.custom_auth_config is None and "custom_auth_config" in self.model_fields_set:
            _dict['custom_auth_config'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateProfileRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "toolkit_slug": obj.get("toolkit_slug"),
            "profile_name": obj.get("profile_name"),
            "display_name": obj.get("display_name"),
            "mcp_server_name": obj.get("mcp_server_name"),
            "is_default": obj.get("is_default") if obj.get("is_default") is not None else False,
            "initiation_fields": obj.get("initiation_fields"),
            "custom_auth_config": obj.get("custom_auth_config"),
            "use_custom_auth": obj.get("use_custom_auth") if obj.get("use_custom_auth") is not None else False
        })
        return _obj


