# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpcomingRun(BaseModel):
    """
    UpcomingRun
    """ # noqa: E501
    trigger_id: StrictStr
    trigger_name: StrictStr
    trigger_type: StrictStr
    next_run_time: StrictStr
    next_run_time_local: StrictStr
    timezone: StrictStr
    cron_expression: StrictStr
    execution_type: StrictStr
    agent_prompt: Optional[StrictStr] = None
    workflow_id: Optional[StrictStr] = None
    is_active: StrictBool
    human_readable: StrictStr
    __properties: ClassVar[List[str]] = ["trigger_id", "trigger_name", "trigger_type", "next_run_time", "next_run_time_local", "timezone", "cron_expression", "execution_type", "agent_prompt", "workflow_id", "is_active", "human_readable"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpcomingRun from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if agent_prompt (nullable) is None
        # and model_fields_set contains the field
        if self.agent_prompt is None and "agent_prompt" in self.model_fields_set:
            _dict['agent_prompt'] = None

        # set to None if workflow_id (nullable) is None
        # and model_fields_set contains the field
        if self.workflow_id is None and "workflow_id" in self.model_fields_set:
            _dict['workflow_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpcomingRun from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "trigger_id": obj.get("trigger_id"),
            "trigger_name": obj.get("trigger_name"),
            "trigger_type": obj.get("trigger_type"),
            "next_run_time": obj.get("next_run_time"),
            "next_run_time_local": obj.get("next_run_time_local"),
            "timezone": obj.get("timezone"),
            "cron_expression": obj.get("cron_expression"),
            "execution_type": obj.get("execution_type"),
            "agent_prompt": obj.get("agent_prompt"),
            "workflow_id": obj.get("workflow_id"),
            "is_active": obj.get("is_active"),
            "human_readable": obj.get("human_readable")
        })
        return _obj


