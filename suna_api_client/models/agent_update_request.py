# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AgentUpdateRequest(BaseModel):
    """
    Request model for updating an existing agent.
    """ # noqa: E501
    name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    system_prompt: Optional[StrictStr] = None
    configured_mcps: Optional[List[Dict[str, Any]]] = None
    custom_mcps: Optional[List[Dict[str, Any]]] = None
    agentpress_tools: Optional[Dict[str, Any]] = None
    is_default: Optional[StrictBool] = None
    profile_image_url: Optional[StrictStr] = None
    icon_name: Optional[StrictStr] = None
    icon_color: Optional[StrictStr] = None
    icon_background: Optional[StrictStr] = None
    replace_mcps: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["name", "description", "system_prompt", "configured_mcps", "custom_mcps", "agentpress_tools", "is_default", "profile_image_url", "icon_name", "icon_color", "icon_background", "replace_mcps"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AgentUpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if system_prompt (nullable) is None
        # and model_fields_set contains the field
        if self.system_prompt is None and "system_prompt" in self.model_fields_set:
            _dict['system_prompt'] = None

        # set to None if configured_mcps (nullable) is None
        # and model_fields_set contains the field
        if self.configured_mcps is None and "configured_mcps" in self.model_fields_set:
            _dict['configured_mcps'] = None

        # set to None if custom_mcps (nullable) is None
        # and model_fields_set contains the field
        if self.custom_mcps is None and "custom_mcps" in self.model_fields_set:
            _dict['custom_mcps'] = None

        # set to None if agentpress_tools (nullable) is None
        # and model_fields_set contains the field
        if self.agentpress_tools is None and "agentpress_tools" in self.model_fields_set:
            _dict['agentpress_tools'] = None

        # set to None if is_default (nullable) is None
        # and model_fields_set contains the field
        if self.is_default is None and "is_default" in self.model_fields_set:
            _dict['is_default'] = None

        # set to None if profile_image_url (nullable) is None
        # and model_fields_set contains the field
        if self.profile_image_url is None and "profile_image_url" in self.model_fields_set:
            _dict['profile_image_url'] = None

        # set to None if icon_name (nullable) is None
        # and model_fields_set contains the field
        if self.icon_name is None and "icon_name" in self.model_fields_set:
            _dict['icon_name'] = None

        # set to None if icon_color (nullable) is None
        # and model_fields_set contains the field
        if self.icon_color is None and "icon_color" in self.model_fields_set:
            _dict['icon_color'] = None

        # set to None if icon_background (nullable) is None
        # and model_fields_set contains the field
        if self.icon_background is None and "icon_background" in self.model_fields_set:
            _dict['icon_background'] = None

        # set to None if replace_mcps (nullable) is None
        # and model_fields_set contains the field
        if self.replace_mcps is None and "replace_mcps" in self.model_fields_set:
            _dict['replace_mcps'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AgentUpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "system_prompt": obj.get("system_prompt"),
            "configured_mcps": obj.get("configured_mcps"),
            "custom_mcps": obj.get("custom_mcps"),
            "agentpress_tools": obj.get("agentpress_tools"),
            "is_default": obj.get("is_default"),
            "profile_image_url": obj.get("profile_image_url"),
            "icon_name": obj.get("icon_name"),
            "icon_color": obj.get("icon_color"),
            "icon_background": obj.get("icon_background"),
            "replace_mcps": obj.get("replace_mcps")
        })
        return _obj


