# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class KnowledgeBaseEntryResponse(BaseModel):
    """
    KnowledgeBaseEntryResponse
    """ # noqa: E501
    entry_id: StrictStr
    name: StrictStr
    description: Optional[StrictStr]
    content: StrictStr
    usage_context: StrictStr
    is_active: StrictBool
    content_tokens: Optional[StrictInt]
    created_at: StrictStr
    updated_at: StrictStr
    source_type: Optional[StrictStr] = None
    source_metadata: Optional[Dict[str, Any]] = None
    file_size: Optional[StrictInt] = None
    file_mime_type: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["entry_id", "name", "description", "content", "usage_context", "is_active", "content_tokens", "created_at", "updated_at", "source_type", "source_metadata", "file_size", "file_mime_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KnowledgeBaseEntryResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if content_tokens (nullable) is None
        # and model_fields_set contains the field
        if self.content_tokens is None and "content_tokens" in self.model_fields_set:
            _dict['content_tokens'] = None

        # set to None if source_type (nullable) is None
        # and model_fields_set contains the field
        if self.source_type is None and "source_type" in self.model_fields_set:
            _dict['source_type'] = None

        # set to None if source_metadata (nullable) is None
        # and model_fields_set contains the field
        if self.source_metadata is None and "source_metadata" in self.model_fields_set:
            _dict['source_metadata'] = None

        # set to None if file_size (nullable) is None
        # and model_fields_set contains the field
        if self.file_size is None and "file_size" in self.model_fields_set:
            _dict['file_size'] = None

        # set to None if file_mime_type (nullable) is None
        # and model_fields_set contains the field
        if self.file_mime_type is None and "file_mime_type" in self.model_fields_set:
            _dict['file_mime_type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KnowledgeBaseEntryResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "entry_id": obj.get("entry_id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "content": obj.get("content"),
            "usage_context": obj.get("usage_context"),
            "is_active": obj.get("is_active"),
            "content_tokens": obj.get("content_tokens"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "source_type": obj.get("source_type"),
            "source_metadata": obj.get("source_metadata"),
            "file_size": obj.get("file_size"),
            "file_mime_type": obj.get("file_mime_type")
        })
        return _obj


