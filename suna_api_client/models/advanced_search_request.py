# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class AdvancedSearchRequest(BaseModel):
    """
    AdvancedSearchRequest
    """ # noqa: E501
    email_contains: Optional[StrictStr] = None
    tier_in: Optional[List[StrictStr]] = None
    subscription_status_in: Optional[List[StrictStr]] = None
    trial_status_in: Optional[List[StrictStr]] = None
    balance_min: Optional[Union[StrictFloat, StrictInt]] = None
    balance_max: Optional[Union[StrictFloat, StrictInt]] = None
    created_after: Optional[datetime] = None
    created_before: Optional[datetime] = None
    has_activity_since: Optional[datetime] = None
    sort_by: Optional[StrictStr] = 'created_at'
    sort_order: Optional[StrictStr] = 'desc'
    __properties: ClassVar[List[str]] = ["email_contains", "tier_in", "subscription_status_in", "trial_status_in", "balance_min", "balance_max", "created_after", "created_before", "has_activity_since", "sort_by", "sort_order"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdvancedSearchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if email_contains (nullable) is None
        # and model_fields_set contains the field
        if self.email_contains is None and "email_contains" in self.model_fields_set:
            _dict['email_contains'] = None

        # set to None if tier_in (nullable) is None
        # and model_fields_set contains the field
        if self.tier_in is None and "tier_in" in self.model_fields_set:
            _dict['tier_in'] = None

        # set to None if subscription_status_in (nullable) is None
        # and model_fields_set contains the field
        if self.subscription_status_in is None and "subscription_status_in" in self.model_fields_set:
            _dict['subscription_status_in'] = None

        # set to None if trial_status_in (nullable) is None
        # and model_fields_set contains the field
        if self.trial_status_in is None and "trial_status_in" in self.model_fields_set:
            _dict['trial_status_in'] = None

        # set to None if balance_min (nullable) is None
        # and model_fields_set contains the field
        if self.balance_min is None and "balance_min" in self.model_fields_set:
            _dict['balance_min'] = None

        # set to None if balance_max (nullable) is None
        # and model_fields_set contains the field
        if self.balance_max is None and "balance_max" in self.model_fields_set:
            _dict['balance_max'] = None

        # set to None if created_after (nullable) is None
        # and model_fields_set contains the field
        if self.created_after is None and "created_after" in self.model_fields_set:
            _dict['created_after'] = None

        # set to None if created_before (nullable) is None
        # and model_fields_set contains the field
        if self.created_before is None and "created_before" in self.model_fields_set:
            _dict['created_before'] = None

        # set to None if has_activity_since (nullable) is None
        # and model_fields_set contains the field
        if self.has_activity_since is None and "has_activity_since" in self.model_fields_set:
            _dict['has_activity_since'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdvancedSearchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "email_contains": obj.get("email_contains"),
            "tier_in": obj.get("tier_in"),
            "subscription_status_in": obj.get("subscription_status_in"),
            "trial_status_in": obj.get("trial_status_in"),
            "balance_min": obj.get("balance_min"),
            "balance_max": obj.get("balance_max"),
            "created_after": obj.get("created_after"),
            "created_before": obj.get("created_before"),
            "has_activity_since": obj.get("has_activity_since"),
            "sort_by": obj.get("sort_by") if obj.get("sort_by") is not None else 'created_at',
            "sort_order": obj.get("sort_order") if obj.get("sort_order") is not None else 'desc'
        })
        return _obj


