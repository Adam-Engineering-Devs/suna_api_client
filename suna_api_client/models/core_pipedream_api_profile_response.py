# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from uuid import UUID
from typing import Optional, Set
from typing_extensions import Self

class CorePipedreamApiProfileResponse(BaseModel):
    """
    CorePipedreamApiProfileResponse
    """ # noqa: E501
    profile_id: UUID
    account_id: UUID
    mcp_qualified_name: StrictStr
    profile_name: StrictStr
    display_name: StrictStr
    app_slug: StrictStr
    app_name: StrictStr
    external_user_id: StrictStr
    enabled_tools: List[StrictStr]
    is_active: StrictBool
    is_default: StrictBool
    is_connected: StrictBool
    created_at: datetime
    updated_at: datetime
    last_used_at: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["profile_id", "account_id", "mcp_qualified_name", "profile_name", "display_name", "app_slug", "app_name", "external_user_id", "enabled_tools", "is_active", "is_default", "is_connected", "created_at", "updated_at", "last_used_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CorePipedreamApiProfileResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if last_used_at (nullable) is None
        # and model_fields_set contains the field
        if self.last_used_at is None and "last_used_at" in self.model_fields_set:
            _dict['last_used_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CorePipedreamApiProfileResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "profile_id": obj.get("profile_id"),
            "account_id": obj.get("account_id"),
            "mcp_qualified_name": obj.get("mcp_qualified_name"),
            "profile_name": obj.get("profile_name"),
            "display_name": obj.get("display_name"),
            "app_slug": obj.get("app_slug"),
            "app_name": obj.get("app_name"),
            "external_user_id": obj.get("external_user_id"),
            "enabled_tools": obj.get("enabled_tools"),
            "is_active": obj.get("is_active"),
            "is_default": obj.get("is_default"),
            "is_connected": obj.get("is_connected"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "last_used_at": obj.get("last_used_at")
        })
        return _obj


