# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TemplateResponse(BaseModel):
    """
    TemplateResponse
    """ # noqa: E501
    template_id: StrictStr
    creator_id: StrictStr
    name: StrictStr
    description: Optional[StrictStr] = None
    system_prompt: StrictStr
    mcp_requirements: List[Dict[str, Any]]
    agentpress_tools: Dict[str, Any]
    tags: List[StrictStr]
    is_public: StrictBool
    is_kortix_team: Optional[StrictBool] = None
    marketplace_published_at: Optional[StrictStr] = None
    download_count: StrictInt
    created_at: StrictStr
    updated_at: StrictStr
    profile_image_url: Optional[StrictStr] = None
    icon_name: Optional[StrictStr] = None
    icon_color: Optional[StrictStr] = None
    icon_background: Optional[StrictStr] = None
    metadata: Dict[str, Any]
    creator_name: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["template_id", "creator_id", "name", "description", "system_prompt", "mcp_requirements", "agentpress_tools", "tags", "is_public", "is_kortix_team", "marketplace_published_at", "download_count", "created_at", "updated_at", "profile_image_url", "icon_name", "icon_color", "icon_background", "metadata", "creator_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TemplateResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if is_kortix_team (nullable) is None
        # and model_fields_set contains the field
        if self.is_kortix_team is None and "is_kortix_team" in self.model_fields_set:
            _dict['is_kortix_team'] = None

        # set to None if marketplace_published_at (nullable) is None
        # and model_fields_set contains the field
        if self.marketplace_published_at is None and "marketplace_published_at" in self.model_fields_set:
            _dict['marketplace_published_at'] = None

        # set to None if profile_image_url (nullable) is None
        # and model_fields_set contains the field
        if self.profile_image_url is None and "profile_image_url" in self.model_fields_set:
            _dict['profile_image_url'] = None

        # set to None if icon_name (nullable) is None
        # and model_fields_set contains the field
        if self.icon_name is None and "icon_name" in self.model_fields_set:
            _dict['icon_name'] = None

        # set to None if icon_color (nullable) is None
        # and model_fields_set contains the field
        if self.icon_color is None and "icon_color" in self.model_fields_set:
            _dict['icon_color'] = None

        # set to None if icon_background (nullable) is None
        # and model_fields_set contains the field
        if self.icon_background is None and "icon_background" in self.model_fields_set:
            _dict['icon_background'] = None

        # set to None if creator_name (nullable) is None
        # and model_fields_set contains the field
        if self.creator_name is None and "creator_name" in self.model_fields_set:
            _dict['creator_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TemplateResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "template_id": obj.get("template_id"),
            "creator_id": obj.get("creator_id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "system_prompt": obj.get("system_prompt"),
            "mcp_requirements": obj.get("mcp_requirements"),
            "agentpress_tools": obj.get("agentpress_tools"),
            "tags": obj.get("tags"),
            "is_public": obj.get("is_public"),
            "is_kortix_team": obj.get("is_kortix_team"),
            "marketplace_published_at": obj.get("marketplace_published_at"),
            "download_count": obj.get("download_count"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "profile_image_url": obj.get("profile_image_url"),
            "icon_name": obj.get("icon_name"),
            "icon_color": obj.get("icon_color"),
            "icon_background": obj.get("icon_background"),
            "metadata": obj.get("metadata"),
            "creator_name": obj.get("creator_name")
        })
        return _obj


