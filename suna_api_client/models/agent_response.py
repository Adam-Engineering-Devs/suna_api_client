# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from suna_api_client.models.agent_version_response import AgentVersionResponse
from typing import Optional, Set
from typing_extensions import Self

class AgentResponse(BaseModel):
    """
    Response model for agent information.
    """ # noqa: E501
    agent_id: StrictStr
    name: StrictStr
    description: Optional[StrictStr] = None
    system_prompt: StrictStr
    configured_mcps: List[Dict[str, Any]]
    custom_mcps: List[Dict[str, Any]]
    agentpress_tools: Dict[str, Any]
    is_default: StrictBool
    profile_image_url: Optional[StrictStr] = None
    icon_name: Optional[StrictStr] = None
    icon_color: Optional[StrictStr] = None
    icon_background: Optional[StrictStr] = None
    created_at: StrictStr
    updated_at: Optional[StrictStr] = None
    is_public: Optional[StrictBool] = None
    tags: Optional[List[StrictStr]] = None
    current_version_id: Optional[StrictStr] = None
    version_count: Optional[StrictInt] = None
    current_version: Optional[AgentVersionResponse] = None
    metadata: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["agent_id", "name", "description", "system_prompt", "configured_mcps", "custom_mcps", "agentpress_tools", "is_default", "profile_image_url", "icon_name", "icon_color", "icon_background", "created_at", "updated_at", "is_public", "tags", "current_version_id", "version_count", "current_version", "metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AgentResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of current_version
        if self.current_version:
            _dict['current_version'] = self.current_version.to_dict()
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if profile_image_url (nullable) is None
        # and model_fields_set contains the field
        if self.profile_image_url is None and "profile_image_url" in self.model_fields_set:
            _dict['profile_image_url'] = None

        # set to None if icon_name (nullable) is None
        # and model_fields_set contains the field
        if self.icon_name is None and "icon_name" in self.model_fields_set:
            _dict['icon_name'] = None

        # set to None if icon_color (nullable) is None
        # and model_fields_set contains the field
        if self.icon_color is None and "icon_color" in self.model_fields_set:
            _dict['icon_color'] = None

        # set to None if icon_background (nullable) is None
        # and model_fields_set contains the field
        if self.icon_background is None and "icon_background" in self.model_fields_set:
            _dict['icon_background'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updated_at'] = None

        # set to None if is_public (nullable) is None
        # and model_fields_set contains the field
        if self.is_public is None and "is_public" in self.model_fields_set:
            _dict['is_public'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        # set to None if current_version_id (nullable) is None
        # and model_fields_set contains the field
        if self.current_version_id is None and "current_version_id" in self.model_fields_set:
            _dict['current_version_id'] = None

        # set to None if version_count (nullable) is None
        # and model_fields_set contains the field
        if self.version_count is None and "version_count" in self.model_fields_set:
            _dict['version_count'] = None

        # set to None if current_version (nullable) is None
        # and model_fields_set contains the field
        if self.current_version is None and "current_version" in self.model_fields_set:
            _dict['current_version'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AgentResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agent_id": obj.get("agent_id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "system_prompt": obj.get("system_prompt"),
            "configured_mcps": obj.get("configured_mcps"),
            "custom_mcps": obj.get("custom_mcps"),
            "agentpress_tools": obj.get("agentpress_tools"),
            "is_default": obj.get("is_default"),
            "profile_image_url": obj.get("profile_image_url"),
            "icon_name": obj.get("icon_name"),
            "icon_color": obj.get("icon_color"),
            "icon_background": obj.get("icon_background"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "is_public": obj.get("is_public"),
            "tags": obj.get("tags"),
            "current_version_id": obj.get("current_version_id"),
            "version_count": obj.get("version_count"),
            "current_version": AgentVersionResponse.from_dict(obj["current_version"]) if obj.get("current_version") is not None else None,
            "metadata": obj.get("metadata")
        })
        return _obj


